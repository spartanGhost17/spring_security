package com.learning.springsecurity.filter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

public class CsrfCookieFilter extends OncePerRequestFilter {
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        CsrfToken csrfToken = (CsrfToken) request.getAttribute(CsrfToken.class.getName());//read csrf generated by backend as request attribute

        if (csrfToken != null && csrfToken.getHeaderName() != null) { // Check if csrfToken is not null
            response.setHeader(csrfToken.getHeaderName(), csrfToken.getToken());//populate the response header
        }

        //if (csrfToken.getHeaderName() != null) { //if framework has already generated Csrf token
        //    response.setHeader(csrfToken.getHeaderName(), csrfToken.getToken());//populate response header
        //}
        filterChain.doFilter(request, response);//pass to next filer in filter chain, eventually when response is sent back csrf will be present in the header. //since csrf in part of header spring will handle cookie generation
    }
}
